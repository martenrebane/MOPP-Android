apply plugin: 'com.android.library'

android {
    namespace 'ee.ria.DigiDoc.configuration'
    compileSdk project.compileSdkVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }

    buildFeatures {
        buildConfig = true
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

dependencies {
    api "org.bouncycastle:bcpkix-jdk15on:${bouncycastleVersion}"
    api "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    api "com.google.code.gson:gson:${gsonVersion}"

    implementation "androidx.core:core:${androidxCoreVersion}"
    implementation "com.jakewharton.timber:timber:${timberVersion}"
    implementation "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
    implementation "commons-io:commons-io:${commonsioVersion}"
    implementation project(path: ':common-lib')
    annotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${autoValueParcelVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

    testImplementation "org.mockito:mockito-core:${mockitoVersion}"

    testImplementation "com.google.code.gson:gson:${gsonVersion}"

    androidTestUtil "androidx.test:orchestrator:${androidxTestOrchestratorVersion}"
    androidTestAnnotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"
    androidTestImplementation "androidx.annotation:annotation:${androidxVersion}"
    androidTestImplementation "androidx.test.ext:junit:${androidxTestVersion}"
    androidTestImplementation "androidx.test:rules:${androidxTestRulesVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${androidxTestEspressoVersion}"
    androidTestImplementation "com.google.truth:truth:${truthVersion}"
}

configurations {
    generateMatchers { extendsFrom api }
}

task fetchAndPackageDefaultConfiguration(type: JavaExec, dependsOn: build) {
    classpath files(getBuildDir().toString() + "/intermediates/javac/release/classes")
    classpath configurations.generateMatchers
    mainClass = 'ee.ria.DigiDoc.configuration.task.FetchAndPackageDefaultConfigurationTask'
    doLast {
        copy {
            from file("${projectDir}/src/main/assets/config")
            into file("${buildDir}/intermediates/library_assets/debug/out/config")
        }
        copy {
            from file("${projectDir}/src/main/assets/config")
            into file("${buildDir}/intermediates/library_assets/release/out/config")
        }
    }
}