apply plugin: 'com.android.library'

android {
    compileSdkVersion project.compileSdkVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        envtest {
            initWith debug
            matchingFallbacks = ['debug']
        }
    }
}

dependencies {
    api "org.bouncycastle:bcpkix-jdk15on:${bouncycastleVersion}"
    api "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    api "org.json:json:${jsonVersion}"

    implementation "com.android.support:support-compat:${androidSupportLibraryVersion}"
    implementation "com.jakewharton.timber:timber:${timberVersion}"
    implementation "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
    annotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${autoValueParcelVersion}"

    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.json:json:${jsonVersion}"

    androidTestUtil "com.android.support.test:orchestrator:${androidSupportTestVersion}"
    androidTestAnnotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"
    androidTestImplementation "com.android.support:support-annotations:${androidSupportLibraryVersion}"
    androidTestImplementation "com.android.support.test:runner:${androidSupportTestVersion}"
    androidTestImplementation "com.android.support.test:rules:${androidSupportTestVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${espressoVersion}"
    androidTestImplementation "com.google.truth:truth:${truthVersion}"
}

configurations {
    generateMatchers { extendsFrom api }
}

task fetchAndPackageDefaultConfiguration(type: JavaExec, dependsOn: build) {
    classpath files(getBuildDir().toString() + "/intermediates/javac/release/compileReleaseJavaWithJavac/classes")
    classpath configurations.generateMatchers
    main = 'ee.ria.DigiDoc.configuration.task.FetchAndPackageDefaultConfigurationTask'
    doLast {
        copy {
            from file("${projectDir}/src/main/assets/config")
            into file("${buildDir}/intermediates/library_assets/debug/out/config")
        }
        copy {
            from file("${projectDir}/src/main/assets/config")
            into file("${buildDir}/intermediates/library_assets/release/out/config")
        }
    }
}